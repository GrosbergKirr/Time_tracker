// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/create_user": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create user",
                "parameters": [
                    {
                        "type": "string",
                        "example": "{\"passportNumber\": \"1111 123456\"}",
                        "description": "Passport data",
                        "name": "passportNumber",
                        "in": "body",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "408": {
                        "description": "Request timeout"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/delete_user": {
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "example": "{\"id\": 1}",
						"description": "User ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "408": {
                        "description": "Request timeout"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/get_users": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Page number",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Number of items per page",
                        "name": "per_page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "User details",
                        "name": "user",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/internal.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/internal.User"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "408": {
                        "description": "Request timeout"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/get_users_tasks": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get user's tasks",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Page number",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Number of items per page",
                        "name": "per_page",
                        "in": "query",
                        "required": true
                    },
                    {
						"example": "{\"id\": 1}",
                        "description": "User id",
                        "name": "user_id",
                        "in": "body",
                        "required": true,
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of tasks",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/internal.Task"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "408": {
                        "description": "Request timeout"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/make_task": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Create task for user",
                "parameters": [
                    {
						"example": "{\"name\": \"Run\", \"user_id\": 1}",
                        "description": "Task ID",
                        "name": "task",
                        "in": "body",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "408": {
                        "description": "Request timeout"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/stop_task": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Stop task",
                "parameters": [
                    {
                        "example": "{\"id\": 1}",
                        "description": "Task ID",
                        "name": "id",
                        "in": "body",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "408": {
                        "description": "Request timeout"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/update_user": {
            "post": {
                "description": "Update user data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "description": "Update details",
                        "name": "user",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/internal.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "408": {
                        "description": "Request timeout"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        }
    },
    "definitions": {
        "internal.Task": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "time_begin": {
                    "type": "string"
                },
                "time_end": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "internal.User": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "passportNumber": {
                    "type": "string"
                },
                "patronymic": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:9090",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Time Tracker app swagger",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
